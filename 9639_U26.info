FILE "9639_U26.bin" E000
option os9
*option 6309

***** General Info
comment  .
comment  ROM LABEL:
comment  .      9639-OS92  V1.2
comment  .      (c) 1982 MICROWARE CORP.
comment  .      3975A            [U26]
comment  .      3A109007-18   1.00/850717
comment  .      [handwritten] 4.01 10-18-85
comment  .
comment  .ORGANIZATION:
comment  .  E000-EFFF    EMPTY
unused E000-EFFF
unused FF5C-FFDF
insert   .        ORG     $E000
insert   .        FILL    $FF,$1000

comment F000 --------------------------------------------------
comment F000 Boot module header.
comment F000 --------------------------------------------------

insert F000 .        nam     Boot
insert F000 .        ttl     os9 system module
insert F000 .
insert F000 .        use     defsfile
insert F000 .
insert F000 tylg    set     Systm+Objct
insert F000 atrv    set     ReEnt+rev
insert F000 rev     set     $01
insert F000 .        mod     BootEnd,name,tylg,atrv,start,0
insert F000 .
insert F000 name    equ  \*
insert F000 .        fcs  /Boot/
insert F000 .        fcb  $05
insert F000 .        ifdef HEADER_DATA
insert F012 .        endc

data F000-F011
lcomment F00D "Boot"
data    F00D-F011

comment  .  FF80-FFDF    I/O SPACE?
data   FF5C-FFEF
data   F3F6-F456
word   FFE0-FFF0
comment  .  FFE0-FFFF    VECTORS

RMB  0010-001E
label 0010        * seems to be where 1 byte data is stored, and $18,U often points here
label 0011 MSBCNT * this starts as 0 if P4 is set, $40 if not
label 0012 LSNLSW
label 0014 LSNMSB
label 0015 CLEARS
label 0016 MEMLOC
label 0018 CMDLOC
label 001A    *ENDLOC
label 001C SCSISTAT
label 001D SCSICTRL
label 001E SECCNT

data  F012-F02D

option nofcc
comment  F02E SCSI CONTROL REG DATA (EXTDEVC):
comment  F02E BIT |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
comment  F02E RD  | REQ | BSY | CB5 | PUP | CB3 | MSG | C/D | I/O |
comment  F02E WT  |     |     |     |     |     |     |     | PAL-16|

label    F012 P4OPEN
label    F020 P4CLOS
        
data F074-F07B
label    F02E SETCMD
lcomment F02E get device control reg
label    F046 SETCRT
lcomment F031 preemptively set carry
lcomment F033 Busy?
bin      F034
lcomment F035 If so, return with carry set
lcomment F037 store CMDLOC, DATALOC, SCSICTRL
lcomment F041 store command to device reg
lcomment F044 success, clear carry
lcomment F046 return
label    F047 HDSHK
lcomment F047 get device control reg
lcomment F04A P4 jumper set?
lcomment F04C Busy?
bin      F04D
lcomment F04E if so, keep checking

comment  F052 2.3.4 Information Transfer Phases
label    F052 INFOXFR
lcomment F052 save start status in B
bin F055
lcomment F054 Busy?
lcomment F056 if not, return err
lcomment F058 get the low 3 bits to lookup
lcomment F05A table lookup
lcomment F060 jump to indicated lookup table function
label    F062 CLEANUP
lcomment F062 command stored?
lcomment F065 If not, keep communicating

lcomment F067 get saved target status
lcomment F06A Error status code?
lcomment F06C If so, return error
lcomment F06E clear carry
label    F071 DDERR
lcomment F071 set carry (error)
label    F074 IXFRTBL
comment  F074 Lookup phase by EXTDEVC 3 LSBits :
lcomment F074 WT_DATA-CTLTBL
lcomment F075 RD_DATA-CTLTBL
lcomment F076 WT_CMD -CTLTBL
lcomment F077 RD_STAT-CTLTBL
lcomment F078 RETURN-CTLTBL Return
lcomment F079 RETURN-CTLTBL Return
lcomment F07A RETURN-CTLTBL Return
lcomment F07B RD_CTRL-CTLTBL
comment  F07C 2.3.5 Command Phase
label    F07C WT_CMD
lcomment F07C load the CMDLOC start memory address
label    F07F WTCLOOP
label    F084 WTCDLY
lcomment F086 device control reg same?
lcomment F089 if so, keep looping
label    F08E RETURN
lcomment F08F load the DATALOC start address
lcomment F08B store the CMDLOC end memory address
comment  F0A2 2.3.6.1 Data In Phase
label    F08F WT_DATA
label    F092 WTDLOOP
label    F097 WTDDLY
lcomment F099 device control reg same?
lcomment F09C if so, keep looping
lcomment F09E store the DATALOC end address
comment  F08F 2.3.6.2 Data Out Phase
label    F0A2 RD_DATA
lcomment F0A2 load the DATALOC start address
label    F0A5 RDDLOOP
lcomment F0AA device control reg same?
lcomment F0AD if so, keep looping
lcomment F0AF store the DATALOC end address
label    F0B3 RD_STAT
lcomment F0B6 store the status in SCSISTAT
comment  F0BA 2.3.8.1 Control Message In Phase
label    F0BA RD_CTRL


label    F0C1 IOPREP
lcomment F0C3 store number of sectors requested
lcomment F0C6 store LSN LSW
lcomment F0CA get device status
bin      F0CE
lcomment F0CD check P4 jumper
lcomment F0D5 save MSBCNT
lcomment F0DB return
lcomment F0DF X points to the start of the xfer settings
lcomment F0E2 start memory from the STARTLOC
lcomment F0EA store the error to be returned as B
lcomment F0EC return
label    F0EE ACKNOW
lcomment F0EE Assert [ACK?]
lcomment F0F0 check BUSY and send command
lcomment F0F3 busy, keep trying
lcomment F0FA indicate E$Read-Read Error
label    F0FD RDSEC2
lcomment F0FF store total number of sectors needed
lcomment F102 indicate 1 sector
lcomment F112 X points to the start of the xfer settings
const F121
lcomment F115 Y is memory location to save to
lcomment F120 increment current sector (LSNLSW)
lcomment F126 Roll over the LSN MSB if necessary
lcomment F12E Decrement the sector counter
lcomment F131 if not done, keep looping
lcomment F133 return when done
comment F139 --------------------------------------------------
comment F139 * MOTOR ON spin-up delay loop 25msec @2MHz
comment F139 --------------------------------------------------
label F139 DLY25MS
label F13E DLY25M2
const F13C
const F13F

comment F145 --------------------------------------------------
comment F145  ModEntrB
comment F145  OS9p1 calls the Boot module at this entry point.
comment F145  IN:U
comment F145 --------------------------------------------------
label F145 start
lcomment F147 reserve space on stack for temporary vars
lcomment F14A 256 bytes for LSN0 buffer
const F14B
lcomment F140 reserve memory for LSN0
lcomment F154 store pointer to start of LSN0 memory area
lcomment F157 keep pointer to vars area of stack
lcomment F159 enable drive motor bit
lcomment F15B save to device control
lcomment F15E wait for spin up
lcomment F160 get device status
lcomment F163 point to table values
lcomment F168 clear TOTSEC
lcomment F16B check P4 jumper
lcomment F16F point to different table values
lcomment F17D store $C4 into $10,U
const F18D
const F190
lcomment F18C 1 sector, $00 MSB
lcomment F18F $0000 LSW (=LSN0 address)
lcomment F195 Error?
lcomment F19A point X to CMDLOC
lcomment F19E If no command, error bad media
lcomment F1AE 256 bytes for LSN0 buffer
lcomment F1B1 done with LSN0 buffer
lcomment F1B4 get size of bootstrap
lcomment F1B6 reserve memory for bootstrap
lcomment F1BB store pointer to start of current block
lcomment F1BE pointer to start of bootstrap to be returned as x
lcomment F1C6 No error.
lcomment F1C1 restore pointer to temp vars
lcomment F1C8 Error
label    F1CA ERR_BAD
lcomment F1CA set carry
lcomment F1CB indicate E$BTyp-Bad Type (incompatable) media

label F1CA
lcomment F1C3 load 1 sector
lcomment F1CD store error to be returned as b
lcomment F1D0 return space on stack used for temp vars
lcomment F1D3 return to kernel routine
comment F28C  Initialize user interupt vectors

lcomment F28C Get SWI2 (os9 command) service routine pointer
lcomment F28E Save it as user service routine pointer
lcomment F290 Get IRQ service routine pointer
lcomment F292 Save it as user IRQ routine pointer

comment  F294 .
lcomment F294 Setup System service routine entry vector

comment  F29C .
lcomment F29C Setup system IRQ service vector

comment F2A4 .
lcomment F2A4 Setup in system IRQ service vector
lcomment F2AA Setup interrupt polling vector
lcomment F2B0 load y with address of table, below
lcomment F2B4 copy table below into dispatch table

comment  F2B7 Initialize system process descriptor
lcomment F2B7 get process table pointer
lcomment F2B9 get system process pointer
comment  F2BB These overlap because it is quicker than trying to strip hi byte from X
lcomment F2BB save it as first process in table
lcomment F2BD save it as the second as well

comment  F3A1 See if init module is in memory already
lcomment F3A1 point to 'Init' module name
lcomment F3A5 try & link it
lcomment F3A7 no error, go on
lcomment F3A9 error linking init, try & load boot file
lcomment F3AC got it, try init again
lcomment F3AE error, re-booting do Reset

comment  F3B0 So far, so good. Save pointer to init module and execute krnp2
lcomment F3B0 Save init module pointer
lcomment F3B2 Point to its name
lcomment F3B6 Try to link it
lcomment F3B8 It worked, execute it
lcomment F3BA It doesn't exist try re-booting
lcomment F3BD No errors, let's try to link it again
lcomment F3BF obviously can't do it, restart machine
lcomment F3C3 execute krnp2

label   F3A1 Cold.z1
label   F3B0 Cold.z2
label   F3B2 Cold.z3
label   F3BF ColdErr
label   F3C3 ColdExit

label   0024 D.Init

comment F3C5 Link module pointed to by X
label   F3C5 link
label   F3F6 SysCalls

data   F456-F466
label   F457 init
label   F45B krnp2
label   F4EB SysCall
label   F4FC L033B

lcomment FFE0 D.Clock absolute address at the start
lcomment FFE2 D.XSWI3
lcomment FFE4 D.XSWI2
lcomment FFE6 D.XFIRQ crash on an FIRQ
lcomment FFE8 D.XIRQ
lcomment FFEA D.XSWI
lcomment FFEC D.XNMI crash on an NMI

label   FD87 L0CD2
label   F467 XSWI3
label   F471 XSWI2
label   F210 D.Crash
label   F47A XSWI

label   FECA S.Poll
label   FF47 SWICal
label   FFE0 DisTable

label 000D Dat.BlCt-ROMCount-RAMCount


rmb     0020-0037

label 0020 D.Tasks
label 0022 D.Tasks+2
label 0024 D.Init
label 0026 D.Poll
label 0028 D.Time
label 0028 D.Year
label 0029 D.Month
label 002A D.Day
label 002B D.Hour
label 002C D.Min
label 002D D.Sec
label 002E D.Tick
label 002F D.Slice
label 0030 D.TSlice
label 0031 D.Boot
label 0032 D.MotOn
label 0033 D.ErrCod
label 0034 D.Daywk
label 0035 D.TkCnt
label 0036 D.BtPtr
label 0037 D.BtSz



rmb     0040-0060
*dec    0040-0060
label 0040 D.BlkMap
label 0042 D.BlkMap+2
label 0044 D.ModDir
label 0045 D.ModDir+1
label 0046 D.ModDir+2

label 0048 D.PrcDBT
label 004A D.SysPrc
label 004C D.SysDAT
label 004E D.SysMem
label 0050 D.Proc
label 0052 D.AProcQ
label 0054 D.WProcQ
label 0056 D.SProcQ
label 0058 D.ModEnd
label 005A D.ModDAT
label 005C D.CldRes
label D.BtBug
label D.Pipe


label   0050 D.Proc

rmb     00C0-00FF

label 00C0 D.SysSvc
label 00C1 D.SysSvc+1
label 00C2 D.SysDis
label 00C4 D.SysIRQ
label 00C6 D.UsrSvc
label 00C8 D.UsrDis
label 00CA D.UsrIRQ
label 00CC D.SysStk
label 00CE D.SvcIRQ
label 00D0 D.SysTsk

label 00E0 D.Clock
label 00E2 D.XSWI3
label 00E4 D.XSWI2
label 00E6 D.XFIRQ
label 00E8 D.XIRQ
label 00EA D.XSWI
label 00EC D.XNMI
label 00EE D.ErrRst
label 00F0 D.SysVec
label 00F2 D.SWI3
label 00F4 D.SWI2
label 00F6 D.FIRQ
label 00F8 D.IRQ
label 00FA D.SWI
label 00FC D.NMI



label   00C0 D.SysSvc
label   00C4 D.SysIRQ
label   00CE D.SvcIRQ
label   00E4 D.XSWI2
label   00E8 D.XIRQ
label   00FE IOEntry
data     F21D-F222
comment  F223
comment  F223  OS9P1 begins here
comment  F223      Routine Cold
comment  F223
comment  F223    System Coldstart; determines system state, initializes
comment  F223  system data structures, searches for the remainder of the
comment  F223  system and attempts to start operation.
comment  F223

lcomment F232  D = $0100
lcomment F233  set Task Structure pointer to $0100
lcomment F237  set Task image table pointer to $0180

comment  F23A  .********************************************************************
comment  F23A  The memory block map is a data structure that is used to manage
comment  F23A  physical memory. Physical memory is assigned in 8Kbyte "blocks".
comment  F23A  256 bytes are reserved for the map and so the maximum physical
comment  F23A  memory size is 256*8Kbyte=2Mbyte. D.BlkMap is a pointer to the
comment  F23A  start of the map (set to $0200, below). D.BlkMap+2 is a pointer
comment  F23A  to the end of the map. Rather than simply setting it to $0300,
comment  F23A  the end pointer is set by the memory sizing routine at L0111.
comment  F23A  (Presumably) this makes it faster to search for unused pages
comment  F23A  and also acts as the mechanism to avoid assigning non-existent
comment  F23A  memory. A value of 0 indicates an unused block and since the
comment  F23A  system block has been initialised to 0 (above) every block starts
comment  F23A  off marked as unused. Initial reservation of blocks occurs
comment  F23A  below, after the memory sizing.
comment  F23A  See "Level 2 flags" in os9.d for other byte values.

lcomment F23B set block map pointer to $0200
lcomment F23F set second block map pointer to $0300

lcomment F241 set system service dispatch table pointer to to $0300
lcomment F244 set user dispatch table pointer to $0400
lcomment F247 set process descriptor block pointer to $0500
lcomment F24A set system process descriptor pointer to $0600
lcomment F24C set user process descriptor pointer to $0600
lcomment F250 set stack pointer to $0800

lcomment F253 set system stack base pointer to $0900
lcomment F255 set system memory map ptr $0900
lcomment F258 set module directory start ptr to $0a00
lcomment F25A set module directory end ptr to $0a00
lcomment F25E set secondary module directory start to $1000
lcomment F260 set module directory DAT pointer to $1000
lcomment set pointer to beginning of global memory to $1000

comment  F266 Initialize secondary interrupt vectors to all point to Vectors for now
label    F223 Cold
label    F22C Cold10
label    F26B Cold14
lcomment F26B Set all IRQ vectors to go to Vectors for now
comment F272 .

label F27F  Cold15
label F2E6  Cold16
label F2F9  Cold17
label F304  Cold20
label F329  Cold30
label F32D  Cold40
label F341  Cold50
label F35C  Cold60
label F37A  Cold62
label F384  Cold70
label F386  Cold75
label F39B  Cold80

comment  F2B0 Setup System calls
lcomment F2DA initialize 1st block to 0 (for this DP)
lcomment F3DD Attempt to link system module

comment  F4EB Process software interupts from system state
comment  F4EB Entry: U=Register stack pointer
lcomment F4EB get pointer to register stack
lcomment F4F0 Restore callers CC register (R$CC=$00)
lcomment F4F2 make it current
lcomment
lcomment
lcomment

lcomment F4FC is it a I/O call? (Also multiplys by 2 for offset)
lcomment F4FD no, go get normal vector
lcomment
lcomment F500 get IOMan vector
comment  F506 Execute regular system calls
lcomment F506 clear MSB of offset
lcomment F507 get vector to call
lcomment F509 it's initialized, go execute it
lcomment F50B set carry for error
lcomment F50C get error code
lcomment F50E return with it

comment  F510 Execute the system call
lcomment F510 preserve register stack pointer
lcomment F512 perform a vectored system call
lcomment F514 restore pointer
lcomment F516 move CC to A for stack update
lcomment F518 go update it if no error from call
lcomment F51A save error code to caller's B
lcomment F51C get callers CC, R$CC=$00

lcomment F51E [B]=E,F,I
lcomment F522 [A]=H,N,Z,V,C
lcomment F524 merge them together
lcomment F526 return it to caller

label   F506 L0345
label   F510 L034F
label   F516 L0355
label   F51C L035B
label   F540 SysSvc

label   F8CA SkipSpc

label   FAA9 Boot

label   FACA Boot30
label   FAEB Boot35
label   FAF1 Boot40
label   FAF3 Boot50
label   FAF9 BootXX
label   FAFA AllRAM
label   FB02 AllRAM10
label   FB03 RAMBlk
label   FB07 RAMBlk10
label   FB0B RAMBlk20

label   FB20 RAMBlk25
label   FB28 RAMBlk30
label   FB29 AllImg
label   FB33 AllImage
label   FB42 AllI.A
label   FB57 AllI.B
label   FB5F AllI.C
label   FB67 AllI.D
label   FB6C AllImErr
label   FB75 AllI.E
label   FB77 AllI.F
label   FB7F AllI.G
label   FB8B AllI.H

label   FB9A FreeHB















label   FC9F L0C28

comment FDEC System IRQ service routine
label   FDEC XIRQ
lcomment FDEC get current process pointer
lcomment FDEE save the stack pointer
lcomment FDF1 get system stack pointer
lcomment FDF4 set system service routine to current
lcomment FDF8 set system IRQ routine to current
lcomment FDFC execute irq service
lcomment FE02 get current process pointer
lcomment FE06 get it's stack pointer
lcomment FE0B disable it's IRQs
lcomment FE0D save it back
lcomment FE10 shut down IRQ's


label   FE10 L0D5B
label   FEB1 S.SysIRQ
label   FEBD L0E28
label   FEC6 S.SvcIRQ

comment  FF33 Execute SWI3 vector (called from $FEEE)

lcomment FF33 disable IRQ's
lcomment FF35 get DP offset of vector
lcomment FF37 go execute it

comment  FF39 Execute SWI2 vector (called from $FEF1)
lcomment FF39 disasble IRQ's

*lcomment FF3B  get DP offset of vector
lcomment FF4B   set DP  to zero
lcomment FF4D   set X to zero
lcomment FF5A   The end of the kernel module is here

*DMAC DATA CHAIN REGISTER
label FFD6 DMC_DCREG
*DMAC INTERRUPT CONTROL REGISTER
label FFD5 DMC_ICREG
*DMAC PRIORITY CONTROL REGISTER
label FFD4 DMC_PCREG

*DMAC DESTINATION CHANNEL CONTROL REGISTER
label FFD1 DMC_DCCREG
*DMAC SOURCE CHANNEL CONTROL REGISTER
label FFD0 DMC_SCCREG

*DMAC DESTINATION BYTE COUNT REGISTER
label FFC6 DMC_DBCREG
*DMAC DESTINATION ADDRESS REGISTER
label FFC4 DMC_DACREG
*DMAC SOURCE BYTE COUNT REGISTER
label FFC2 DMC_SBCREG
*DMAC SOURCE ADDRESS REGISTER
label FFC0 DMC_SADREG

*CONTROL SWITCHES
label FFBC CTRL_SW
*USER TASK REGISTER
label FFBB USER_TASK
*OS TASK REGISTER
label FFBA OS_TASK

*DMA DESTINATION TASK REGISTER
label FFB9 DMA_DTASK
*DMA SOURCE TASK REGISTER
label FFB8 DMA_STASK

*MC68B40 PTM
label FFB0 PTADDR
*S6551A ACIA #1
label FFAC ACADDR1
*S6551A ACIA #2
label FFA8 ACADDR2
*TIME/DATE AND SENSE SWITCH PIA
label FFA4 PIADDR
*POSTBYTE REGISTER
label FFA0 PB_REG
label FF81 EXTDEVD
label FF80 EXTDEVC
label FF60 EXTRNIO
